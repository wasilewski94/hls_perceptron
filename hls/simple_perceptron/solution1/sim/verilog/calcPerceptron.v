// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calcPerceptron,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.195200,HLS_SYN_LAT=63632,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=33,HLS_SYN_FF=3425,HLS_SYN_LUT=5080,HLS_VERSION=2019_2}" *)

module calcPerceptron (
        ap_clk,
        ap_rst_n,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        w_Addr_A,
        w_EN_A,
        w_WEN_A,
        w_Din_A,
        w_Dout_A,
        w_Clk_A,
        w_Rst_A,
        w_Addr_B,
        w_EN_B,
        w_WEN_B,
        w_Din_B,
        w_Dout_B,
        w_Clk_B,
        w_Rst_B,
        b_Addr_A,
        b_EN_A,
        b_WEN_A,
        b_Din_A,
        b_Dout_A,
        b_Clk_A,
        b_Rst_A,
        res_Addr_A,
        res_EN_A,
        res_WEN_A,
        res_Din_A,
        res_Dout_A,
        res_Clk_A,
        res_Rst_A,
        res_Addr_B,
        res_EN_B,
        res_WEN_B,
        res_Din_B,
        res_Dout_B,
        res_Clk_B,
        res_Rst_B,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_pp0_stage0 = 97'd4;
parameter    ap_ST_fsm_pp0_stage1 = 97'd8;
parameter    ap_ST_fsm_pp0_stage2 = 97'd16;
parameter    ap_ST_fsm_pp0_stage3 = 97'd32;
parameter    ap_ST_fsm_pp0_stage4 = 97'd64;
parameter    ap_ST_fsm_state14 = 97'd128;
parameter    ap_ST_fsm_state15 = 97'd256;
parameter    ap_ST_fsm_state16 = 97'd512;
parameter    ap_ST_fsm_state17 = 97'd1024;
parameter    ap_ST_fsm_state18 = 97'd2048;
parameter    ap_ST_fsm_state19 = 97'd4096;
parameter    ap_ST_fsm_state20 = 97'd8192;
parameter    ap_ST_fsm_state21 = 97'd16384;
parameter    ap_ST_fsm_state22 = 97'd32768;
parameter    ap_ST_fsm_state23 = 97'd65536;
parameter    ap_ST_fsm_state24 = 97'd131072;
parameter    ap_ST_fsm_state25 = 97'd262144;
parameter    ap_ST_fsm_state26 = 97'd524288;
parameter    ap_ST_fsm_state27 = 97'd1048576;
parameter    ap_ST_fsm_state28 = 97'd2097152;
parameter    ap_ST_fsm_state29 = 97'd4194304;
parameter    ap_ST_fsm_state30 = 97'd8388608;
parameter    ap_ST_fsm_state31 = 97'd16777216;
parameter    ap_ST_fsm_state32 = 97'd33554432;
parameter    ap_ST_fsm_state33 = 97'd67108864;
parameter    ap_ST_fsm_state34 = 97'd134217728;
parameter    ap_ST_fsm_state35 = 97'd268435456;
parameter    ap_ST_fsm_state36 = 97'd536870912;
parameter    ap_ST_fsm_state37 = 97'd1073741824;
parameter    ap_ST_fsm_state38 = 97'd2147483648;
parameter    ap_ST_fsm_state39 = 97'd4294967296;
parameter    ap_ST_fsm_state40 = 97'd8589934592;
parameter    ap_ST_fsm_state41 = 97'd17179869184;
parameter    ap_ST_fsm_state42 = 97'd34359738368;
parameter    ap_ST_fsm_state43 = 97'd68719476736;
parameter    ap_ST_fsm_state44 = 97'd137438953472;
parameter    ap_ST_fsm_state45 = 97'd274877906944;
parameter    ap_ST_fsm_pp1_stage0 = 97'd549755813888;
parameter    ap_ST_fsm_pp1_stage1 = 97'd1099511627776;
parameter    ap_ST_fsm_pp1_stage2 = 97'd2199023255552;
parameter    ap_ST_fsm_pp1_stage3 = 97'd4398046511104;
parameter    ap_ST_fsm_pp1_stage4 = 97'd8796093022208;
parameter    ap_ST_fsm_pp1_stage5 = 97'd17592186044416;
parameter    ap_ST_fsm_pp1_stage6 = 97'd35184372088832;
parameter    ap_ST_fsm_pp1_stage7 = 97'd70368744177664;
parameter    ap_ST_fsm_pp1_stage8 = 97'd140737488355328;
parameter    ap_ST_fsm_pp1_stage9 = 97'd281474976710656;
parameter    ap_ST_fsm_pp1_stage10 = 97'd562949953421312;
parameter    ap_ST_fsm_pp1_stage11 = 97'd1125899906842624;
parameter    ap_ST_fsm_pp1_stage12 = 97'd2251799813685248;
parameter    ap_ST_fsm_pp1_stage13 = 97'd4503599627370496;
parameter    ap_ST_fsm_pp1_stage14 = 97'd9007199254740992;
parameter    ap_ST_fsm_pp1_stage15 = 97'd18014398509481984;
parameter    ap_ST_fsm_pp1_stage16 = 97'd36028797018963968;
parameter    ap_ST_fsm_pp1_stage17 = 97'd72057594037927936;
parameter    ap_ST_fsm_pp1_stage18 = 97'd144115188075855872;
parameter    ap_ST_fsm_pp1_stage19 = 97'd288230376151711744;
parameter    ap_ST_fsm_pp1_stage20 = 97'd576460752303423488;
parameter    ap_ST_fsm_pp1_stage21 = 97'd1152921504606846976;
parameter    ap_ST_fsm_pp1_stage22 = 97'd2305843009213693952;
parameter    ap_ST_fsm_pp1_stage23 = 97'd4611686018427387904;
parameter    ap_ST_fsm_pp1_stage24 = 97'd9223372036854775808;
parameter    ap_ST_fsm_pp1_stage25 = 97'd18446744073709551616;
parameter    ap_ST_fsm_pp1_stage26 = 97'd36893488147419103232;
parameter    ap_ST_fsm_pp1_stage27 = 97'd73786976294838206464;
parameter    ap_ST_fsm_pp1_stage28 = 97'd147573952589676412928;
parameter    ap_ST_fsm_pp1_stage29 = 97'd295147905179352825856;
parameter    ap_ST_fsm_pp1_stage30 = 97'd590295810358705651712;
parameter    ap_ST_fsm_pp1_stage31 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_pp1_stage32 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_pp1_stage33 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_pp1_stage34 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_pp1_stage35 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_pp1_stage36 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_pp1_stage37 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_pp1_stage38 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_pp1_stage39 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_pp1_stage40 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_pp1_stage41 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_pp1_stage42 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_pp1_stage43 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_pp1_stage44 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_pp1_stage45 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_pp1_stage46 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_pp1_stage47 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_pp1_stage48 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_pp1_stage49 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_pp1_stage50 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_pp1_stage51 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_pp1_stage52 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_pp1_stage53 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_pp1_stage54 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_pp1_stage55 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_pp1_stage56 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state104 = 97'd79228162514264337593543950336;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [3:0] x_WEN_A;
output  [31:0] x_Din_A;
input  [31:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] w_Addr_A;
output   w_EN_A;
output  [3:0] w_WEN_A;
output  [31:0] w_Din_A;
input  [31:0] w_Dout_A;
output   w_Clk_A;
output   w_Rst_A;
output  [31:0] w_Addr_B;
output   w_EN_B;
output  [3:0] w_WEN_B;
output  [31:0] w_Din_B;
input  [31:0] w_Dout_B;
output   w_Clk_B;
output   w_Rst_B;
output  [31:0] b_Addr_A;
output   b_EN_A;
output  [3:0] b_WEN_A;
output  [31:0] b_Din_A;
input  [31:0] b_Dout_A;
output   b_Clk_A;
output   b_Rst_A;
output  [31:0] res_Addr_A;
output   res_EN_A;
output  [3:0] res_WEN_A;
output  [31:0] res_Din_A;
input  [31:0] res_Dout_A;
output   res_Clk_A;
output   res_Rst_A;
output  [31:0] res_Addr_B;
output   res_EN_B;
output  [3:0] res_WEN_B;
output  [31:0] res_Din_B;
input  [31:0] res_Dout_B;
output   res_Clk_B;
output   res_Rst_B;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg x_EN_A;
reg w_EN_A;
reg w_EN_B;
reg b_EN_A;
reg res_EN_A;
reg[3:0] res_WEN_A;
reg res_EN_B;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] sum_1_reg_512;
reg   [9:0] i_0_reg_524;
reg   [3:0] j1_0_reg_535;
reg   [31:0] reg_591;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln24_reg_1314;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state47_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln37_reg_1357;
wire   [31:0] grp_fu_561_p2;
reg   [31:0] reg_597;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_state52_pp1_stage6_iter0;
wire    ap_block_pp1_stage6_11001;
wire    ap_CS_fsm_pp1_stage12;
wire    ap_block_state58_pp1_stage12_iter0;
wire    ap_block_pp1_stage12_11001;
wire   [31:0] grp_fu_547_p2;
reg   [31:0] reg_603;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln24_reg_1314_pp0_iter1_reg;
wire    ap_CS_fsm_pp1_stage18;
wire    ap_block_state64_pp1_stage18_iter0;
wire    ap_block_pp1_stage18_11001;
wire    ap_CS_fsm_pp1_stage25;
wire    ap_block_state71_pp1_stage25_iter0;
wire    ap_block_pp1_stage25_11001;
wire    ap_CS_fsm_pp1_stage32;
wire    ap_block_state78_pp1_stage32_iter0;
wire    ap_block_pp1_stage32_11001;
wire    ap_CS_fsm_pp1_stage46;
wire    ap_block_state92_pp1_stage46_iter0;
wire    ap_block_pp1_stage46_11001;
reg   [31:0] reg_610;
wire    ap_CS_fsm_state15;
reg   [31:0] reg_615;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_pp1_stage13;
wire    ap_block_state59_pp1_stage13_iter0;
wire    ap_block_pp1_stage13_11001;
wire    ap_CS_fsm_pp1_stage20;
wire    ap_block_state66_pp1_stage20_iter0;
wire    ap_block_pp1_stage20_11001;
wire    ap_CS_fsm_pp1_stage27;
wire    ap_block_state73_pp1_stage27_iter0;
wire    ap_block_pp1_stage27_11001;
wire   [31:0] grp_fu_586_p2;
reg   [31:0] reg_621;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_pp1_stage41;
wire    ap_block_state87_pp1_stage41_iter0;
wire    ap_block_pp1_stage41_11001;
wire   [31:0] grp_fu_581_p2;
reg   [31:0] reg_626;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_pp1_stage56;
wire    ap_block_state102_pp1_stage56_iter0;
wire    ap_block_pp1_stage56_11001;
reg   [31:0] reg_631;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state48_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
reg   [31:0] reg_638;
reg   [31:0] reg_644;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_state53_pp1_stage7_iter0;
wire    ap_block_pp1_stage7_11001;
reg   [31:0] reg_649;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state49_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_11001;
reg   [31:0] reg_655;
reg   [31:0] reg_660;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_state54_pp1_stage8_iter0;
wire    ap_block_pp1_stage8_11001;
reg   [31:0] reg_667;
reg   [31:0] reg_672;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state50_pp1_stage4_iter0;
wire    ap_block_pp1_stage4_11001;
reg   [31:0] reg_677;
reg   [31:0] reg_684;
reg   [31:0] reg_690;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_state55_pp1_stage9_iter0;
wire    ap_block_pp1_stage9_11001;
reg   [31:0] reg_697;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_state51_pp1_stage5_iter0;
wire    ap_block_pp1_stage5_11001;
wire   [31:0] grp_fu_565_p2;
reg   [31:0] reg_704;
wire   [31:0] grp_fu_553_p2;
reg   [31:0] reg_709;
wire    ap_CS_fsm_pp1_stage17;
wire    ap_block_state63_pp1_stage17_iter0;
wire    ap_block_pp1_stage17_11001;
wire    ap_CS_fsm_pp1_stage22;
wire    ap_block_state68_pp1_stage22_iter0;
wire    ap_block_pp1_stage22_11001;
reg   [31:0] reg_716;
wire    ap_CS_fsm_pp1_stage14;
wire    ap_block_state60_pp1_stage14_iter0;
wire    ap_block_pp1_stage14_11001;
wire   [13:0] add_ln22_fu_726_p2;
reg   [13:0] add_ln22_reg_1216;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln22_fu_732_p2;
wire   [4:0] j_1_fu_738_p2;
reg   [4:0] j_1_reg_1225;
wire   [0:0] valid_load_load_fu_744_p1;
wire   [0:0] icmp_ln24_fu_747_p2;
wire   [9:0] i_fu_753_p2;
reg   [9:0] i_reg_1318;
reg   [31:0] x_load_reg_1333;
wire   [63:0] zext_ln27_fu_779_p1;
reg   [63:0] zext_ln27_reg_1338;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln30_fu_784_p2;
reg   [0:0] icmp_ln30_reg_1348;
wire   [31:0] bitcast_ln27_1_fu_800_p1;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln37_fu_810_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state46_pp1_stage0_iter0;
wire    ap_block_state103_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] j_fu_816_p2;
reg   [3:0] j_reg_1361;
wire   [7:0] shl_ln_fu_822_p3;
reg   [7:0] shl_ln_reg_1366;
wire   [63:0] zext_ln42_fu_884_p1;
reg   [63:0] zext_ln42_reg_1393;
reg   [31:0] w_load_12_reg_1403;
reg   [31:0] w_load_13_reg_1423;
reg   [31:0] w_load_4_reg_1453;
reg   [31:0] w_load_5_reg_1458;
reg   [31:0] res_load_5_reg_1463;
reg   [31:0] w_load_7_reg_1478;
reg   [31:0] res_load_7_reg_1483;
reg   [31:0] tmp_1_reg_1498;
reg   [31:0] tmp_10_1_reg_1513;
reg   [31:0] tmp_10_2_reg_1518;
reg   [31:0] tmp_10_3_reg_1523;
reg   [31:0] tmp_10_4_reg_1528;
reg   [31:0] tmp_10_5_reg_1533;
wire    ap_CS_fsm_pp1_stage10;
wire    ap_block_state56_pp1_stage10_iter0;
wire    ap_block_pp1_stage10_11001;
reg   [31:0] tmp_10_6_reg_1538;
reg   [31:0] tmp_10_7_reg_1543;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_state57_pp1_stage11_iter0;
wire    ap_block_pp1_stage11_11001;
reg   [31:0] tmp_10_8_reg_1548;
wire   [31:0] grp_fu_569_p2;
reg   [31:0] tmp_10_s_reg_1553;
wire   [31:0] grp_fu_574_p2;
reg   [31:0] tmp_10_10_reg_1558;
reg   [31:0] tmp_10_12_reg_1563;
reg   [31:0] tmp7_reg_1568;
wire    ap_CS_fsm_pp1_stage15;
wire    ap_block_state61_pp1_stage15_iter0;
wire    ap_block_pp1_stage15_11001;
reg   [31:0] tmp10_reg_1573;
wire    ap_CS_fsm_pp1_stage16;
wire    ap_block_state62_pp1_stage16_iter0;
wire    ap_block_pp1_stage16_11001;
reg   [31:0] tmp11_reg_1578;
wire   [31:0] grp_fu_557_p2;
reg   [31:0] tmp14_reg_1583;
wire   [31:0] bitcast_ln42_1_fu_1204_p1;
wire    ap_CS_fsm_pp1_stage33;
wire    ap_block_state79_pp1_stage33_iter0;
wire    ap_block_pp1_stage33_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state46;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage56_subdone;
reg   [4:0] j_0_reg_488;
wire    ap_CS_fsm_state45;
reg   [13:0] phi_mul_reg_500;
wire   [31:0] ap_phi_mux_sum_1_phi_fu_516_p4;
reg   [9:0] ap_phi_mux_i_0_phi_fu_528_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_j1_0_phi_fu_539_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln25_fu_763_p1;
wire   [63:0] zext_ln25_1_fu_774_p1;
wire   [63:0] zext_ln40_10_fu_848_p1;
wire   [63:0] zext_ln40_11_fu_871_p1;
wire   [63:0] zext_ln40_12_fu_906_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln40_14_fu_928_p1;
wire   [63:0] zext_ln40_fu_947_p1;
wire    ap_block_pp1_stage2;
wire   [63:0] zext_ln40_15_fu_969_p1;
wire   [63:0] zext_ln40_1_fu_991_p1;
wire    ap_block_pp1_stage3;
wire   [63:0] zext_ln40_2_fu_1013_p1;
wire   [63:0] zext_ln40_3_fu_1035_p1;
wire    ap_block_pp1_stage4;
wire   [63:0] zext_ln40_4_fu_1057_p1;
wire   [63:0] zext_ln40_5_fu_1079_p1;
wire    ap_block_pp1_stage5;
wire   [63:0] zext_ln40_6_fu_1101_p1;
wire   [63:0] zext_ln40_7_fu_1123_p1;
wire    ap_block_pp1_stage6;
wire   [63:0] zext_ln40_8_fu_1145_p1;
wire   [63:0] zext_ln40_9_fu_1167_p1;
wire    ap_block_pp1_stage7;
wire   [63:0] zext_ln40_13_fu_1189_p1;
reg   [0:0] valid_fu_152;
wire   [31:0] x_Addr_A_orig;
reg   [31:0] w_Addr_A_orig;
reg   [31:0] w_Addr_B_orig;
reg   [31:0] b_Addr_A_orig;
reg   [31:0] res_Addr_A_orig;
reg   [31:0] res_Addr_B_orig;
wire    ap_block_pp1_stage8;
reg   [31:0] grp_fu_547_p0;
reg   [31:0] grp_fu_547_p1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state30;
wire    ap_block_pp1_stage9;
wire    ap_block_pp1_stage10;
wire    ap_block_pp1_stage11;
wire    ap_block_pp1_stage12;
wire    ap_block_pp1_stage13;
wire    ap_block_pp1_stage14;
wire    ap_block_pp1_stage16;
wire    ap_block_pp1_stage18;
wire    ap_CS_fsm_pp1_stage21;
wire    ap_block_pp1_stage21;
wire    ap_CS_fsm_pp1_stage23;
wire    ap_block_pp1_stage23;
wire    ap_CS_fsm_pp1_stage28;
wire    ap_block_pp1_stage28;
wire    ap_CS_fsm_pp1_stage42;
wire    ap_block_pp1_stage42;
reg   [31:0] grp_fu_553_p0;
reg   [31:0] grp_fu_553_p1;
reg   [31:0] grp_fu_561_p0;
reg   [31:0] grp_fu_561_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_565_p0;
reg   [31:0] grp_fu_565_p1;
reg   [31:0] grp_fu_569_p0;
reg   [31:0] grp_fu_569_p1;
reg   [31:0] grp_fu_581_p1;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_pp1_stage47;
wire    ap_block_pp1_stage47;
reg   [31:0] grp_fu_586_p1;
wire    ap_block_pp1_stage33;
wire   [13:0] i_0_cast17_fu_759_p1;
wire   [13:0] add_ln25_fu_768_p2;
wire   [31:0] bitcast_ln27_fu_790_p1;
wire   [31:0] xor_ln27_fu_794_p2;
wire   [7:0] or_ln40_23_fu_830_p2;
wire   [12:0] or_ln40_s_fu_836_p3;
wire  signed [13:0] sext_ln40_10_fu_844_p1;
wire   [7:0] or_ln40_24_fu_853_p2;
wire   [12:0] or_ln40_10_fu_859_p3;
wire  signed [13:0] sext_ln40_11_fu_867_p1;
wire   [4:0] or_ln1_fu_876_p3;
wire   [7:0] or_ln40_25_fu_889_p2;
wire   [12:0] or_ln40_11_fu_894_p3;
wire  signed [13:0] sext_ln40_12_fu_902_p1;
wire   [7:0] or_ln40_27_fu_911_p2;
wire   [12:0] or_ln40_13_fu_916_p3;
wire  signed [13:0] sext_ln40_14_fu_924_p1;
wire   [12:0] or_ln_fu_933_p4;
wire  signed [13:0] sext_ln40_fu_943_p1;
wire   [7:0] or_ln40_28_fu_952_p2;
wire   [12:0] or_ln40_14_fu_957_p3;
wire  signed [13:0] sext_ln40_15_fu_965_p1;
wire   [7:0] or_ln40_fu_974_p2;
wire   [12:0] or_ln40_1_fu_979_p3;
wire  signed [13:0] sext_ln40_1_fu_987_p1;
wire   [7:0] or_ln40_15_fu_996_p2;
wire   [12:0] or_ln40_2_fu_1001_p3;
wire  signed [13:0] sext_ln40_2_fu_1009_p1;
wire   [7:0] or_ln40_16_fu_1018_p2;
wire   [12:0] or_ln40_3_fu_1023_p3;
wire  signed [13:0] sext_ln40_3_fu_1031_p1;
wire   [7:0] or_ln40_17_fu_1040_p2;
wire   [12:0] or_ln40_4_fu_1045_p3;
wire  signed [13:0] sext_ln40_4_fu_1053_p1;
wire   [7:0] or_ln40_18_fu_1062_p2;
wire   [12:0] or_ln40_5_fu_1067_p3;
wire  signed [13:0] sext_ln40_5_fu_1075_p1;
wire   [7:0] or_ln40_19_fu_1084_p2;
wire   [12:0] or_ln40_6_fu_1089_p3;
wire  signed [13:0] sext_ln40_6_fu_1097_p1;
wire   [7:0] or_ln40_20_fu_1106_p2;
wire   [12:0] or_ln40_7_fu_1111_p3;
wire  signed [13:0] sext_ln40_7_fu_1119_p1;
wire   [7:0] or_ln40_21_fu_1128_p2;
wire   [12:0] or_ln40_8_fu_1133_p3;
wire  signed [13:0] sext_ln40_8_fu_1141_p1;
wire   [7:0] or_ln40_22_fu_1150_p2;
wire   [12:0] or_ln40_9_fu_1155_p3;
wire  signed [13:0] sext_ln40_9_fu_1163_p1;
wire   [7:0] or_ln40_26_fu_1172_p2;
wire   [12:0] or_ln40_12_fu_1177_p3;
wire  signed [13:0] sext_ln40_13_fu_1185_p1;
wire   [31:0] bitcast_ln42_fu_1194_p1;
wire   [31:0] xor_ln42_fu_1198_p2;
wire    ap_CS_fsm_state104;
reg   [96:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_pp1_stage5_subdone;
wire    ap_block_pp1_stage6_subdone;
wire    ap_block_pp1_stage7_subdone;
wire    ap_block_pp1_stage8_subdone;
wire    ap_block_pp1_stage9_subdone;
wire    ap_block_pp1_stage10_subdone;
wire    ap_block_pp1_stage11_subdone;
wire    ap_block_pp1_stage12_subdone;
wire    ap_block_pp1_stage13_subdone;
wire    ap_block_pp1_stage14_subdone;
wire    ap_block_pp1_stage15_subdone;
wire    ap_block_pp1_stage16_subdone;
wire    ap_block_pp1_stage17_subdone;
wire    ap_block_pp1_stage18_subdone;
wire    ap_block_state65_pp1_stage19_iter0;
wire    ap_block_pp1_stage19_subdone;
wire    ap_block_pp1_stage19_11001;
wire    ap_block_pp1_stage20_subdone;
wire    ap_block_state67_pp1_stage21_iter0;
wire    ap_block_pp1_stage21_subdone;
wire    ap_block_pp1_stage21_11001;
wire    ap_block_pp1_stage22_subdone;
wire    ap_block_state69_pp1_stage23_iter0;
wire    ap_block_pp1_stage23_subdone;
wire    ap_block_pp1_stage23_11001;
wire    ap_block_state70_pp1_stage24_iter0;
wire    ap_block_pp1_stage24_subdone;
wire    ap_block_pp1_stage24_11001;
wire    ap_block_pp1_stage25_subdone;
wire    ap_block_state72_pp1_stage26_iter0;
wire    ap_block_pp1_stage26_subdone;
wire    ap_block_pp1_stage26_11001;
wire    ap_block_pp1_stage27_subdone;
wire    ap_block_state74_pp1_stage28_iter0;
wire    ap_block_pp1_stage28_subdone;
wire    ap_block_pp1_stage28_11001;
wire    ap_block_state75_pp1_stage29_iter0;
wire    ap_block_pp1_stage29_subdone;
wire    ap_block_pp1_stage29_11001;
wire    ap_block_state76_pp1_stage30_iter0;
wire    ap_block_pp1_stage30_subdone;
wire    ap_block_pp1_stage30_11001;
wire    ap_block_state77_pp1_stage31_iter0;
wire    ap_block_pp1_stage31_subdone;
wire    ap_block_pp1_stage31_11001;
wire    ap_block_pp1_stage32_subdone;
wire    ap_block_pp1_stage33_subdone;
wire    ap_block_state80_pp1_stage34_iter0;
wire    ap_block_pp1_stage34_subdone;
wire    ap_block_pp1_stage34_11001;
wire    ap_block_state81_pp1_stage35_iter0;
wire    ap_block_pp1_stage35_subdone;
wire    ap_block_pp1_stage35_11001;
wire    ap_block_state82_pp1_stage36_iter0;
wire    ap_block_pp1_stage36_subdone;
wire    ap_block_pp1_stage36_11001;
wire    ap_block_state83_pp1_stage37_iter0;
wire    ap_block_pp1_stage37_subdone;
wire    ap_block_pp1_stage37_11001;
wire    ap_block_state84_pp1_stage38_iter0;
wire    ap_block_pp1_stage38_subdone;
wire    ap_block_pp1_stage38_11001;
wire    ap_block_state85_pp1_stage39_iter0;
wire    ap_block_pp1_stage39_subdone;
wire    ap_block_pp1_stage39_11001;
wire    ap_block_state86_pp1_stage40_iter0;
wire    ap_block_pp1_stage40_subdone;
wire    ap_block_pp1_stage40_11001;
wire    ap_block_pp1_stage41_subdone;
wire    ap_block_state88_pp1_stage42_iter0;
wire    ap_block_pp1_stage42_subdone;
wire    ap_block_pp1_stage42_11001;
wire    ap_block_state89_pp1_stage43_iter0;
wire    ap_block_pp1_stage43_subdone;
wire    ap_block_pp1_stage43_11001;
wire    ap_block_state90_pp1_stage44_iter0;
wire    ap_block_pp1_stage44_subdone;
wire    ap_block_pp1_stage44_11001;
wire    ap_block_state91_pp1_stage45_iter0;
wire    ap_block_pp1_stage45_subdone;
wire    ap_block_pp1_stage45_11001;
wire    ap_block_pp1_stage46_subdone;
wire    ap_block_state93_pp1_stage47_iter0;
wire    ap_block_pp1_stage47_subdone;
wire    ap_block_pp1_stage47_11001;
wire    ap_block_state94_pp1_stage48_iter0;
wire    ap_block_pp1_stage48_subdone;
wire    ap_block_pp1_stage48_11001;
wire    ap_block_state95_pp1_stage49_iter0;
wire    ap_block_pp1_stage49_subdone;
wire    ap_block_pp1_stage49_11001;
wire    ap_block_state96_pp1_stage50_iter0;
wire    ap_block_pp1_stage50_subdone;
wire    ap_block_pp1_stage50_11001;
wire    ap_block_state97_pp1_stage51_iter0;
wire    ap_block_pp1_stage51_subdone;
wire    ap_block_pp1_stage51_11001;
wire    ap_block_state98_pp1_stage52_iter0;
wire    ap_block_pp1_stage52_subdone;
wire    ap_block_pp1_stage52_11001;
wire    ap_block_state99_pp1_stage53_iter0;
wire    ap_block_pp1_stage53_subdone;
wire    ap_block_pp1_stage53_11001;
wire    ap_block_state100_pp1_stage54_iter0;
wire    ap_block_pp1_stage54_subdone;
wire    ap_block_pp1_stage54_11001;
wire    ap_block_state101_pp1_stage55_iter0;
wire    ap_block_pp1_stage55_subdone;
wire    ap_block_pp1_stage55_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

calcPerceptron_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
calcPerceptron_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_547_p0),
    .din1(grp_fu_547_p1),
    .ce(1'b1),
    .dout(grp_fu_547_p2)
);

calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_553_p0),
    .din1(grp_fu_553_p1),
    .ce(1'b1),
    .dout(grp_fu_553_p2)
);

calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_709),
    .din1(tmp_10_12_reg_1563),
    .ce(1'b1),
    .dout(grp_fu_557_p2)
);

calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_561_p0),
    .din1(grp_fu_561_p1),
    .ce(1'b1),
    .dout(grp_fu_561_p2)
);

calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_565_p0),
    .din1(grp_fu_565_p1),
    .ce(1'b1),
    .dout(grp_fu_565_p2)
);

calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_569_p0),
    .din1(grp_fu_569_p1),
    .ce(1'b1),
    .dout(grp_fu_569_p2)
);

calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(res_Dout_A),
    .din1(w_load_12_reg_1403),
    .ce(1'b1),
    .dout(grp_fu_574_p2)
);

calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(grp_fu_581_p1),
    .ce(1'b1),
    .dout(grp_fu_581_p2)
);

calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(grp_fu_586_p1),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln22_fu_732_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln22_fu_732_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state46) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((valid_load_load_fu_744_p1 == 1'd1) & (icmp_ln22_fu_732_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage56_subdone) & (1'b1 == ap_CS_fsm_pp1_stage56)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((valid_load_load_fu_744_p1 == 1'd1) & (icmp_ln22_fu_732_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_732_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_524 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1314 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_524 <= i_reg_1318;
    end
end

always @ (posedge ap_clk) begin
    if (((valid_load_load_fu_744_p1 == 1'd1) & (icmp_ln22_fu_732_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j1_0_reg_535 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j1_0_reg_535 <= j_reg_1361;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        j_0_reg_488 <= j_1_reg_1225;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_488 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        phi_mul_reg_500 <= add_ln22_reg_1216;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_500 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6))) begin
            reg_631 <= res_Dout_B;
        end else if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            reg_631 <= res_Dout_A;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6))) begin
            reg_638 <= w_Dout_B;
        end else if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            reg_638 <= w_Dout_A;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7))) begin
            reg_649 <= res_Dout_A;
        end else if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            reg_649 <= res_Dout_B;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8))) begin
            reg_660 <= res_Dout_B;
        end else if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            reg_660 <= res_Dout_A;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8))) begin
            reg_677 <= res_Dout_A;
        end else if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            reg_677 <= res_Dout_B;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9))) begin
            reg_690 <= res_Dout_B;
        end else if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            reg_690 <= res_Dout_A;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9))) begin
            reg_697 <= res_Dout_A;
        end else if (((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
            reg_697 <= res_Dout_B;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_732_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_1_reg_512 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1314_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_1_reg_512 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1348 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        valid_fu_152 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_fu_152 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln22_reg_1216 <= add_ln22_fu_726_p2;
        j_1_reg_1225 <= j_1_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_1318 <= i_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_1314 <= icmp_ln24_fu_747_p2;
        icmp_ln24_reg_1314_pp0_iter1_reg <= icmp_ln24_reg_1314;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln30_reg_1348 <= icmp_ln30_fu_784_p2;
        zext_ln27_reg_1338[4 : 0] <= zext_ln27_fu_779_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln37_reg_1357 <= icmp_ln37_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_reg_1361 <= j_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln24_reg_1314 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_591 <= w_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage12_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1314 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_597 <= grp_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1314_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage46_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage46) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage32_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage32) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage25_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage25) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage18_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage12_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_603 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        reg_610 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp1_stage27_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage27) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage20_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage13_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_615 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b0 == ap_block_pp1_stage41_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage41) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_621 <= grp_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((1'b0 == ap_block_pp1_stage56_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage56) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_626 <= grp_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage7_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_644 <= res_Dout_B;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage3_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_655 <= w_Dout_B;
        reg_667 <= w_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage4_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_672 <= w_Dout_B;
        reg_684 <= w_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage7_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage12_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_704 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage22_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage17_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage12_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_709 <= grp_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage14_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage22_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_716 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage5_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_load_5_reg_1463 <= res_Dout_A;
        w_load_4_reg_1453 <= w_Dout_B;
        w_load_5_reg_1458 <= w_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage6_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_load_7_reg_1483 <= res_Dout_A;
        w_load_7_reg_1478 <= w_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln37_fu_810_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        shl_ln_reg_1366[7 : 4] <= shl_ln_fu_822_p3[7 : 4];
        zext_ln42_reg_1393[3 : 0] <= zext_ln42_fu_884_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage16_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp10_reg_1573 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage17_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp11_reg_1578 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage17_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage17))) begin
        tmp14_reg_1583 <= grp_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage15_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp7_reg_1568 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage11_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage11))) begin
        tmp_10_10_reg_1558 <= grp_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage12_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_10_12_reg_1563 <= grp_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage8_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_10_1_reg_1513 <= grp_fu_561_p2;
        tmp_10_2_reg_1518 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage9_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_10_3_reg_1523 <= grp_fu_561_p2;
        tmp_10_4_reg_1528 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage10_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_10_5_reg_1533 <= grp_fu_561_p2;
        tmp_10_6_reg_1538 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage11_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_10_7_reg_1543 <= grp_fu_561_p2;
        tmp_10_8_reg_1548 <= grp_fu_565_p2;
        tmp_10_s_reg_1553 <= grp_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage7_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_1_reg_1498 <= grp_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w_load_12_reg_1403 <= w_Dout_B;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (icmp_ln37_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_load_13_reg_1423 <= w_Dout_B;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1314 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_load_reg_1333 <= x_Dout_A;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_747_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_810_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state46 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state46 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln24_reg_1314 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_528_p4 = i_reg_1318;
    end else begin
        ap_phi_mux_i_0_phi_fu_528_p4 = i_0_reg_524;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j1_0_phi_fu_539_p4 = j_reg_1361;
    end else begin
        ap_phi_mux_j1_0_phi_fu_539_p4 = j1_0_reg_535;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        b_Addr_A_orig = zext_ln42_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        b_Addr_A_orig = zext_ln27_fu_779_p1;
    end else begin
        b_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        b_EN_A = 1'b1;
    end else begin
        b_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage23) & (1'b0 == ap_block_pp1_stage23))) begin
        grp_fu_547_p0 = reg_709;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage18))) begin
        grp_fu_547_p0 = tmp11_reg_1578;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage16))) begin
        grp_fu_547_p0 = tmp7_reg_1568;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage14)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage28) & (1'b0 == ap_block_pp1_stage28)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage21) & (1'b0 == ap_block_pp1_stage21)))) begin
        grp_fu_547_p0 = reg_615;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage12))) begin
        grp_fu_547_p0 = tmp_10_7_reg_1543;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage11))) begin
        grp_fu_547_p0 = tmp_10_5_reg_1533;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage10))) begin
        grp_fu_547_p0 = tmp_10_3_reg_1523;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage9))) begin
        grp_fu_547_p0 = tmp_10_1_reg_1513;
    end else if (((1'b1 == ap_CS_fsm_state30) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage42) & (1'b0 == ap_block_pp1_stage42)))) begin
        grp_fu_547_p0 = reg_621;
    end else if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)))) begin
        grp_fu_547_p0 = reg_610;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        grp_fu_547_p0 = reg_597;
    end else begin
        grp_fu_547_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage18))) begin
        grp_fu_547_p1 = tmp10_reg_1573;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage16)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage23) & (1'b0 == ap_block_pp1_stage23)))) begin
        grp_fu_547_p1 = reg_716;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage14)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage28) & (1'b0 == ap_block_pp1_stage28)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage21) & (1'b0 == ap_block_pp1_stage21)))) begin
        grp_fu_547_p1 = reg_603;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage13))) begin
        grp_fu_547_p1 = tmp_10_s_reg_1553;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage12))) begin
        grp_fu_547_p1 = tmp_10_8_reg_1548;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage11))) begin
        grp_fu_547_p1 = tmp_10_6_reg_1538;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage10))) begin
        grp_fu_547_p1 = tmp_10_4_reg_1528;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage9))) begin
        grp_fu_547_p1 = tmp_10_2_reg_1518;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8))) begin
        grp_fu_547_p1 = tmp_1_reg_1498;
    end else if (((1'b1 == ap_CS_fsm_state30) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage42) & (1'b0 == ap_block_pp1_stage42)))) begin
        grp_fu_547_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_547_p1 = sum_1_reg_512;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_547_p1 = ap_phi_mux_sum_1_phi_fu_516_p4;
    end else begin
        grp_fu_547_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage18) & (1'b0 == ap_block_pp1_stage18))) begin
            grp_fu_553_p0 = tmp14_reg_1583;
        end else if (((1'b1 == ap_CS_fsm_pp1_stage13) & (1'b0 == ap_block_pp1_stage13))) begin
            grp_fu_553_p0 = tmp_10_10_reg_1558;
        end else if (((1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8))) begin
            grp_fu_553_p0 = reg_597;
        end else begin
            grp_fu_553_p0 = 'bx;
        end
    end else begin
        grp_fu_553_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage18))) begin
        grp_fu_553_p1 = reg_709;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)) | ((1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage13)))) begin
        grp_fu_553_p1 = reg_704;
    end else begin
        grp_fu_553_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8))) begin
        grp_fu_561_p0 = res_load_7_reg_1483;
    end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_561_p0 = res_load_5_reg_1463;
    end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_561_p0 = reg_690;
    end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_561_p0 = reg_660;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage9)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        grp_fu_561_p0 = reg_649;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_561_p0 = reg_631;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_561_p0 = x_load_reg_1333;
    end else begin
        grp_fu_561_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_561_p1 = w_load_4_reg_1453;
    end else if ((((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage9)))) begin
        grp_fu_561_p1 = reg_672;
    end else if ((((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)))) begin
        grp_fu_561_p1 = reg_655;
    end else if ((((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        grp_fu_561_p1 = reg_638;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_561_p1 = reg_591;
    end else begin
        grp_fu_561_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage9))) begin
        grp_fu_565_p0 = res_Dout_B;
    end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_565_p0 = reg_631;
    end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_565_p0 = reg_697;
    end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_565_p0 = reg_677;
    end else if ((((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)))) begin
        grp_fu_565_p0 = reg_644;
    end else begin
        grp_fu_565_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage9))) begin
        grp_fu_565_p1 = w_load_13_reg_1423;
    end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_565_p1 = w_load_7_reg_1478;
    end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_565_p1 = w_load_5_reg_1458;
    end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_565_p1 = reg_684;
    end else if ((((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)))) begin
        grp_fu_565_p1 = reg_667;
    end else begin
        grp_fu_565_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9))) begin
            grp_fu_569_p0 = res_Dout_A;
        end else if (((1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8))) begin
            grp_fu_569_p0 = res_Dout_B;
        end else begin
            grp_fu_569_p0 = 'bx;
        end
    end else begin
        grp_fu_569_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9))) begin
            grp_fu_569_p1 = reg_684;
        end else if (((1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8))) begin
            grp_fu_569_p1 = reg_591;
        end else begin
            grp_fu_569_p1 = 'bx;
        end
    end else begin
        grp_fu_569_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage47) & (1'b0 == ap_block_pp1_stage47))) begin
        grp_fu_581_p1 = reg_603;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_581_p1 = reg_615;
    end else begin
        grp_fu_581_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage33) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage33))) begin
        grp_fu_586_p1 = bitcast_ln42_1_fu_1204_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_586_p1 = bitcast_ln27_1_fu_800_p1;
    end else begin
        grp_fu_586_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        res_Addr_A_orig = zext_ln42_reg_1393;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8))) begin
        res_Addr_A_orig = 64'd13;
    end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_Addr_A_orig = 64'd11;
    end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_Addr_A_orig = 64'd9;
    end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_Addr_A_orig = 64'd7;
    end else if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_Addr_A_orig = 64'd5;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_Addr_A_orig = 64'd3;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_Addr_A_orig = 64'd1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        res_Addr_A_orig = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        res_Addr_A_orig = zext_ln27_reg_1338;
    end else begin
        res_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8))) begin
            res_Addr_B_orig = 64'd12;
        end else if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7))) begin
            res_Addr_B_orig = 64'd10;
        end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6))) begin
            res_Addr_B_orig = 64'd8;
        end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
            res_Addr_B_orig = 64'd6;
        end else if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            res_Addr_B_orig = 64'd4;
        end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            res_Addr_B_orig = 64'd2;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            res_Addr_B_orig = 64'd0;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            res_Addr_B_orig = 64'd15;
        end else begin
            res_Addr_B_orig = 'bx;
        end
    end else begin
        res_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        res_EN_A = 1'b1;
    end else begin
        res_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        res_EN_B = 1'b1;
    end else begin
        res_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln37_reg_1357 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        res_WEN_A = 4'd15;
    end else begin
        res_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_13_fu_1189_p1;
    end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_8_fu_1145_p1;
    end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_6_fu_1101_p1;
    end else if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_4_fu_1057_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_2_fu_1013_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_15_fu_969_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w_Addr_A_orig = zext_ln40_14_fu_928_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln40_10_fu_848_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_Addr_A_orig = zext_ln25_1_fu_774_p1;
    end else begin
        w_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7))) begin
            w_Addr_B_orig = zext_ln40_9_fu_1167_p1;
        end else if (((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6))) begin
            w_Addr_B_orig = zext_ln40_7_fu_1123_p1;
        end else if (((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
            w_Addr_B_orig = zext_ln40_5_fu_1079_p1;
        end else if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            w_Addr_B_orig = zext_ln40_3_fu_1035_p1;
        end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            w_Addr_B_orig = zext_ln40_1_fu_991_p1;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            w_Addr_B_orig = zext_ln40_fu_947_p1;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            w_Addr_B_orig = zext_ln40_12_fu_906_p1;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            w_Addr_B_orig = zext_ln40_11_fu_871_p1;
        end else begin
            w_Addr_B_orig = 'bx;
        end
    end else begin
        w_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        w_EN_A = 1'b1;
    end else begin
        w_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        w_EN_B = 1'b1;
    end else begin
        w_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((valid_load_load_fu_744_p1 == 1'd1) & (icmp_ln22_fu_732_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln22_fu_732_p2 == 1'd1) & (valid_load_load_fu_744_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln24_fu_747_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln24_fu_747_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln37_fu_810_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln37_fu_810_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_pp1_stage12 : begin
            if ((1'b0 == ap_block_pp1_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end
        end
        ap_ST_fsm_pp1_stage13 : begin
            if ((1'b0 == ap_block_pp1_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end
        end
        ap_ST_fsm_pp1_stage14 : begin
            if ((1'b0 == ap_block_pp1_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end
        end
        ap_ST_fsm_pp1_stage15 : begin
            if ((1'b0 == ap_block_pp1_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end
        end
        ap_ST_fsm_pp1_stage16 : begin
            if ((1'b0 == ap_block_pp1_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage16;
            end
        end
        ap_ST_fsm_pp1_stage17 : begin
            if ((1'b0 == ap_block_pp1_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage17;
            end
        end
        ap_ST_fsm_pp1_stage18 : begin
            if ((1'b0 == ap_block_pp1_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage18;
            end
        end
        ap_ST_fsm_pp1_stage19 : begin
            if ((1'b0 == ap_block_pp1_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage19;
            end
        end
        ap_ST_fsm_pp1_stage20 : begin
            if ((1'b0 == ap_block_pp1_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage20;
            end
        end
        ap_ST_fsm_pp1_stage21 : begin
            if ((1'b0 == ap_block_pp1_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage21;
            end
        end
        ap_ST_fsm_pp1_stage22 : begin
            if ((1'b0 == ap_block_pp1_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage22;
            end
        end
        ap_ST_fsm_pp1_stage23 : begin
            if ((1'b0 == ap_block_pp1_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage23;
            end
        end
        ap_ST_fsm_pp1_stage24 : begin
            if ((1'b0 == ap_block_pp1_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage24;
            end
        end
        ap_ST_fsm_pp1_stage25 : begin
            if ((1'b0 == ap_block_pp1_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage25;
            end
        end
        ap_ST_fsm_pp1_stage26 : begin
            if ((1'b0 == ap_block_pp1_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage26;
            end
        end
        ap_ST_fsm_pp1_stage27 : begin
            if ((1'b0 == ap_block_pp1_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage27;
            end
        end
        ap_ST_fsm_pp1_stage28 : begin
            if ((1'b0 == ap_block_pp1_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage28;
            end
        end
        ap_ST_fsm_pp1_stage29 : begin
            if ((1'b0 == ap_block_pp1_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage29;
            end
        end
        ap_ST_fsm_pp1_stage30 : begin
            if ((1'b0 == ap_block_pp1_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage30;
            end
        end
        ap_ST_fsm_pp1_stage31 : begin
            if ((1'b0 == ap_block_pp1_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage31;
            end
        end
        ap_ST_fsm_pp1_stage32 : begin
            if ((1'b0 == ap_block_pp1_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage32;
            end
        end
        ap_ST_fsm_pp1_stage33 : begin
            if ((1'b0 == ap_block_pp1_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage33;
            end
        end
        ap_ST_fsm_pp1_stage34 : begin
            if ((1'b0 == ap_block_pp1_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage34;
            end
        end
        ap_ST_fsm_pp1_stage35 : begin
            if ((1'b0 == ap_block_pp1_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage35;
            end
        end
        ap_ST_fsm_pp1_stage36 : begin
            if ((1'b0 == ap_block_pp1_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage36;
            end
        end
        ap_ST_fsm_pp1_stage37 : begin
            if ((1'b0 == ap_block_pp1_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage37;
            end
        end
        ap_ST_fsm_pp1_stage38 : begin
            if ((1'b0 == ap_block_pp1_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage38;
            end
        end
        ap_ST_fsm_pp1_stage39 : begin
            if ((1'b0 == ap_block_pp1_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage39;
            end
        end
        ap_ST_fsm_pp1_stage40 : begin
            if ((1'b0 == ap_block_pp1_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage40;
            end
        end
        ap_ST_fsm_pp1_stage41 : begin
            if ((1'b0 == ap_block_pp1_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage41;
            end
        end
        ap_ST_fsm_pp1_stage42 : begin
            if ((1'b0 == ap_block_pp1_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage42;
            end
        end
        ap_ST_fsm_pp1_stage43 : begin
            if ((1'b0 == ap_block_pp1_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage43;
            end
        end
        ap_ST_fsm_pp1_stage44 : begin
            if ((1'b0 == ap_block_pp1_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage44;
            end
        end
        ap_ST_fsm_pp1_stage45 : begin
            if ((1'b0 == ap_block_pp1_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage45;
            end
        end
        ap_ST_fsm_pp1_stage46 : begin
            if ((1'b0 == ap_block_pp1_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage46;
            end
        end
        ap_ST_fsm_pp1_stage47 : begin
            if ((1'b0 == ap_block_pp1_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage47;
            end
        end
        ap_ST_fsm_pp1_stage48 : begin
            if ((1'b0 == ap_block_pp1_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage48;
            end
        end
        ap_ST_fsm_pp1_stage49 : begin
            if ((1'b0 == ap_block_pp1_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage49;
            end
        end
        ap_ST_fsm_pp1_stage50 : begin
            if ((1'b0 == ap_block_pp1_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage50;
            end
        end
        ap_ST_fsm_pp1_stage51 : begin
            if ((1'b0 == ap_block_pp1_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage51;
            end
        end
        ap_ST_fsm_pp1_stage52 : begin
            if ((1'b0 == ap_block_pp1_stage52_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage52;
            end
        end
        ap_ST_fsm_pp1_stage53 : begin
            if ((1'b0 == ap_block_pp1_stage53_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage53;
            end
        end
        ap_ST_fsm_pp1_stage54 : begin
            if ((1'b0 == ap_block_pp1_stage54_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage54;
            end
        end
        ap_ST_fsm_pp1_stage55 : begin
            if ((1'b0 == ap_block_pp1_stage55_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage55;
            end
        end
        ap_ST_fsm_pp1_stage56 : begin
            if ((1'b0 == ap_block_pp1_stage56_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage56;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_726_p2 = (phi_mul_reg_500 + 14'd784);

assign add_ln25_fu_768_p2 = (phi_mul_reg_500 + i_0_cast17_fu_759_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp1_stage10 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp1_stage12 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp1_stage13 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp1_stage14 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp1_stage15 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp1_stage16 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_pp1_stage17 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp1_stage18 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp1_stage20 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp1_stage21 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp1_stage22 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp1_stage23 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp1_stage25 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp1_stage27 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp1_stage28 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp1_stage32 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp1_stage33 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp1_stage41 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_pp1_stage42 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_pp1_stage46 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_pp1_stage47 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp1_stage56 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd38];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage33 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage37_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage38_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage40_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage41_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage42 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage42_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage43_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage44_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage45_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage46_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage47 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage47_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage48_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage49_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage50_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage51_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage52_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage52_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage53_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage53_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage54_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage54_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage55_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage55_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage56_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage56_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state100_pp1_stage54_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp1_stage55_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp1_stage56_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp1_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp1_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp1_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp1_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp1_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp1_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp1_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp1_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp1_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp1_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp1_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp1_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp1_stage50_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp1_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp1_stage52_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp1_stage53_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_sum_1_phi_fu_516_p4 = sum_1_reg_512;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Addr_A = b_Addr_A_orig << 32'd2;

assign b_Clk_A = ap_clk;

assign b_Din_A = 32'd0;

assign b_Rst_A = ap_rst_n_inv;

assign b_WEN_A = 4'd0;

assign bitcast_ln27_1_fu_800_p1 = xor_ln27_fu_794_p2;

assign bitcast_ln27_fu_790_p1 = reg_615;

assign bitcast_ln42_1_fu_1204_p1 = xor_ln42_fu_1198_p2;

assign bitcast_ln42_fu_1194_p1 = reg_603;

assign i_0_cast17_fu_759_p1 = ap_phi_mux_i_0_phi_fu_528_p4;

assign i_fu_753_p2 = (ap_phi_mux_i_0_phi_fu_528_p4 + 10'd1);

assign icmp_ln22_fu_732_p2 = ((j_0_reg_488 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_747_p2 = ((ap_phi_mux_i_0_phi_fu_528_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_784_p2 = ((j_0_reg_488 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_810_p2 = ((ap_phi_mux_j1_0_phi_fu_539_p4 == 4'd10) ? 1'b1 : 1'b0);

assign j_1_fu_738_p2 = (j_0_reg_488 + 5'd1);

assign j_fu_816_p2 = (ap_phi_mux_j1_0_phi_fu_539_p4 + 4'd1);

assign or_ln1_fu_876_p3 = {{1'd1}, {ap_phi_mux_j1_0_phi_fu_539_p4}};

assign or_ln40_10_fu_859_p3 = {{5'd17}, {or_ln40_24_fu_853_p2}};

assign or_ln40_11_fu_894_p3 = {{5'd17}, {or_ln40_25_fu_889_p2}};

assign or_ln40_12_fu_1177_p3 = {{5'd17}, {or_ln40_26_fu_1172_p2}};

assign or_ln40_13_fu_916_p3 = {{5'd17}, {or_ln40_27_fu_911_p2}};

assign or_ln40_14_fu_957_p3 = {{5'd17}, {or_ln40_28_fu_952_p2}};

assign or_ln40_15_fu_996_p2 = (shl_ln_reg_1366 | 8'd2);

assign or_ln40_16_fu_1018_p2 = (shl_ln_reg_1366 | 8'd3);

assign or_ln40_17_fu_1040_p2 = (shl_ln_reg_1366 | 8'd4);

assign or_ln40_18_fu_1062_p2 = (shl_ln_reg_1366 | 8'd5);

assign or_ln40_19_fu_1084_p2 = (shl_ln_reg_1366 | 8'd6);

assign or_ln40_1_fu_979_p3 = {{5'd17}, {or_ln40_fu_974_p2}};

assign or_ln40_20_fu_1106_p2 = (shl_ln_reg_1366 | 8'd7);

assign or_ln40_21_fu_1128_p2 = (shl_ln_reg_1366 | 8'd8);

assign or_ln40_22_fu_1150_p2 = (shl_ln_reg_1366 | 8'd9);

assign or_ln40_23_fu_830_p2 = (shl_ln_fu_822_p3 | 8'd10);

assign or_ln40_24_fu_853_p2 = (shl_ln_fu_822_p3 | 8'd11);

assign or_ln40_25_fu_889_p2 = (shl_ln_reg_1366 | 8'd12);

assign or_ln40_26_fu_1172_p2 = (shl_ln_reg_1366 | 8'd13);

assign or_ln40_27_fu_911_p2 = (shl_ln_reg_1366 | 8'd14);

assign or_ln40_28_fu_952_p2 = (shl_ln_reg_1366 | 8'd15);

assign or_ln40_2_fu_1001_p3 = {{5'd17}, {or_ln40_15_fu_996_p2}};

assign or_ln40_3_fu_1023_p3 = {{5'd17}, {or_ln40_16_fu_1018_p2}};

assign or_ln40_4_fu_1045_p3 = {{5'd17}, {or_ln40_17_fu_1040_p2}};

assign or_ln40_5_fu_1067_p3 = {{5'd17}, {or_ln40_18_fu_1062_p2}};

assign or_ln40_6_fu_1089_p3 = {{5'd17}, {or_ln40_19_fu_1084_p2}};

assign or_ln40_7_fu_1111_p3 = {{5'd17}, {or_ln40_20_fu_1106_p2}};

assign or_ln40_8_fu_1133_p3 = {{5'd17}, {or_ln40_21_fu_1128_p2}};

assign or_ln40_9_fu_1155_p3 = {{5'd17}, {or_ln40_22_fu_1150_p2}};

assign or_ln40_fu_974_p2 = (shl_ln_reg_1366 | 8'd1);

assign or_ln40_s_fu_836_p3 = {{5'd17}, {or_ln40_23_fu_830_p2}};

assign or_ln_fu_933_p4 = {{{{5'd17}, {j1_0_reg_535}}}, {4'd0}};

assign res_Addr_A = res_Addr_A_orig << 32'd2;

assign res_Addr_B = res_Addr_B_orig << 32'd2;

assign res_Clk_A = ap_clk;

assign res_Clk_B = ap_clk;

assign res_Din_A = reg_626;

assign res_Din_B = 32'd0;

assign res_Rst_A = ap_rst_n_inv;

assign res_Rst_B = ap_rst_n_inv;

assign res_WEN_B = 4'd0;

assign sext_ln40_10_fu_844_p1 = $signed(or_ln40_s_fu_836_p3);

assign sext_ln40_11_fu_867_p1 = $signed(or_ln40_10_fu_859_p3);

assign sext_ln40_12_fu_902_p1 = $signed(or_ln40_11_fu_894_p3);

assign sext_ln40_13_fu_1185_p1 = $signed(or_ln40_12_fu_1177_p3);

assign sext_ln40_14_fu_924_p1 = $signed(or_ln40_13_fu_916_p3);

assign sext_ln40_15_fu_965_p1 = $signed(or_ln40_14_fu_957_p3);

assign sext_ln40_1_fu_987_p1 = $signed(or_ln40_1_fu_979_p3);

assign sext_ln40_2_fu_1009_p1 = $signed(or_ln40_2_fu_1001_p3);

assign sext_ln40_3_fu_1031_p1 = $signed(or_ln40_3_fu_1023_p3);

assign sext_ln40_4_fu_1053_p1 = $signed(or_ln40_4_fu_1045_p3);

assign sext_ln40_5_fu_1075_p1 = $signed(or_ln40_5_fu_1067_p3);

assign sext_ln40_6_fu_1097_p1 = $signed(or_ln40_6_fu_1089_p3);

assign sext_ln40_7_fu_1119_p1 = $signed(or_ln40_7_fu_1111_p3);

assign sext_ln40_8_fu_1141_p1 = $signed(or_ln40_8_fu_1133_p3);

assign sext_ln40_9_fu_1163_p1 = $signed(or_ln40_9_fu_1155_p3);

assign sext_ln40_fu_943_p1 = $signed(or_ln_fu_933_p4);

assign shl_ln_fu_822_p3 = {{ap_phi_mux_j1_0_phi_fu_539_p4}, {4'd0}};

assign valid_load_load_fu_744_p1 = valid_fu_152;

assign w_Addr_A = w_Addr_A_orig << 32'd2;

assign w_Addr_B = w_Addr_B_orig << 32'd2;

assign w_Clk_A = ap_clk;

assign w_Clk_B = ap_clk;

assign w_Din_A = 32'd0;

assign w_Din_B = 32'd0;

assign w_Rst_A = ap_rst_n_inv;

assign w_Rst_B = ap_rst_n_inv;

assign w_WEN_A = 4'd0;

assign w_WEN_B = 4'd0;

assign x_Addr_A = x_Addr_A_orig << 32'd2;

assign x_Addr_A_orig = zext_ln25_fu_763_p1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 32'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 4'd0;

assign xor_ln27_fu_794_p2 = (bitcast_ln27_fu_790_p1 ^ 32'd2147483648);

assign xor_ln42_fu_1198_p2 = (bitcast_ln42_fu_1194_p1 ^ 32'd2147483648);

assign zext_ln25_1_fu_774_p1 = add_ln25_fu_768_p2;

assign zext_ln25_fu_763_p1 = ap_phi_mux_i_0_phi_fu_528_p4;

assign zext_ln27_fu_779_p1 = j_0_reg_488;

assign zext_ln40_10_fu_848_p1 = $unsigned(sext_ln40_10_fu_844_p1);

assign zext_ln40_11_fu_871_p1 = $unsigned(sext_ln40_11_fu_867_p1);

assign zext_ln40_12_fu_906_p1 = $unsigned(sext_ln40_12_fu_902_p1);

assign zext_ln40_13_fu_1189_p1 = $unsigned(sext_ln40_13_fu_1185_p1);

assign zext_ln40_14_fu_928_p1 = $unsigned(sext_ln40_14_fu_924_p1);

assign zext_ln40_15_fu_969_p1 = $unsigned(sext_ln40_15_fu_965_p1);

assign zext_ln40_1_fu_991_p1 = $unsigned(sext_ln40_1_fu_987_p1);

assign zext_ln40_2_fu_1013_p1 = $unsigned(sext_ln40_2_fu_1009_p1);

assign zext_ln40_3_fu_1035_p1 = $unsigned(sext_ln40_3_fu_1031_p1);

assign zext_ln40_4_fu_1057_p1 = $unsigned(sext_ln40_4_fu_1053_p1);

assign zext_ln40_5_fu_1079_p1 = $unsigned(sext_ln40_5_fu_1075_p1);

assign zext_ln40_6_fu_1101_p1 = $unsigned(sext_ln40_6_fu_1097_p1);

assign zext_ln40_7_fu_1123_p1 = $unsigned(sext_ln40_7_fu_1119_p1);

assign zext_ln40_8_fu_1145_p1 = $unsigned(sext_ln40_8_fu_1141_p1);

assign zext_ln40_9_fu_1167_p1 = $unsigned(sext_ln40_9_fu_1163_p1);

assign zext_ln40_fu_947_p1 = $unsigned(sext_ln40_fu_943_p1);

assign zext_ln42_fu_884_p1 = or_ln1_fu_876_p3;

always @ (posedge ap_clk) begin
    zext_ln27_reg_1338[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_1366[3:0] <= 4'b0000;
    zext_ln42_reg_1393[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000001;
end

endmodule //calcPerceptron
